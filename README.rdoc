= CLIC Solr Search Demo

This app is being built simply to test search using sunspot/rsolr/solr.


== Installation

The solr server must be running to access any of the searchable models.  
This is unfortunate.  It would be nice, if some things just wouldn't work 
or would fallback on standard database searching, but no.  If it is not,
you'll get ...

 Errno::ECONNREFUSED: Connection refused - connect(2)


 rake db:create
 rake db:migrate
 rake sunspot:solr:start
 rake app:import
 rake sunspot:solr:reindex
 script/server


== Production Deployment

As this app is being installed on a VM Java jruby tomcat thing, we need special instructions.  Apparently, for Tomcat 5, we need to use jruby-rack-0.9.6.jar, which is included in lib/.

Tomcat will unarchive the war file and DESTROY the existing unarchived version!  Any file uploads will need to be kept elsewhere.  This is also true for the db, however, I am currently using the default settings and we aren't.  Remember, still just a demo.

 ( warble from a jruby environment to get the jruby specific gems )

 # prepare the war
 [jakewendt@dev : clic_solr_search_demo ]> bash
 [jakewendt@dev : clic_solr_search_demo ]> rvm use jruby
 [jakewendt@dev : clic_solr_search_demo ]> warble
 [jakewendt@dev : clic_solr_search_demo ]> scp clic_solr.war ccls.berkeley.edu:

 # stop tomcat as "jakewendt"
 [jakewendt@dev : clic_solr_search_demo ]> ssh ccls
 [jakewendt@ccls-01:~]> sudo /sbin/service tomcat5 stop

 # copy in new war fail as "tomcat"
 [jakewendt@ccls-01:~] > sudo su -l tomcat
 [tomcat@ccls-01:~] > /bin/rm -rf /var/lib/tomcat5/webapps/clic_solr
 [tomcat@ccls-01:~] > cp ~jakewendt/clic_solr.war /var/lib/tomcat5/webapps/
 [tomcat@ccls-01:~] > exit

 # start tomcat as "jakewendt"
 [jakewendt@ccls-01:~] > sudo /sbin/service tomcat5 start
 [jakewendt@ccls-01:~] > tail -f /var/log/tomcat5/catalina.out

 # start sunspot:solr server (sunspot:solr:start does not work in jruby)
 [jakewendt@ccls-01:~] > sudo su -l tomcat
 [tomcat@ccls-01:~] > cd /var/lib/tomcat5/webapps/clic_solr/WEB-INF
 [tomcat@ccls-01:WEB-INF] > rake sunspot:solr:run RAILS_ENV=production &
 # log is at /var/lib/tomcat5/webapps/clic_solr/WEB-INF/log/sunspot-solr-production.log




{Kenai}[http://kenai.com/projects/warbler/pages/Home]

{Berkeley Wiki}[https://wikihub.berkeley.edu/display/istas/Getting+Started+with+JRuby]




== Testing

There isn't any extensive testing yet.  However, ...

Due to the existing of sunspot/solr code, testing can be tricky.  Either don't
test searching and stub out the functionality to make the app run, then test
everything else.  OR, start the solr server for the test environment.  I'm 
going to go with the latter.

 rake sunspot:solr:start RAILS_ENV=test

 # will print something like ...

   	(in /Users/jakewendt/github_repo/ccls/clic_solr_search_demo)
   	Validating all html with http://localhost/w3c-validator/check
   	Loaded suite /usr/bin/rake
   	Started

   	Finished in 0.000297 seconds.

   	0 tests, 0 assertions, 0 failures, 0 errors
   	/Users/jakewendt/github_repo/ccls/clic_solr_search_demo
   	Wed Jul 13 10:26:36 -0700 2011
   	Loaded suite /usr/bin/rake
   	Started

   	Finished in 0.000345 seconds.

   	0 tests, 0 assertions, 0 failures, 0 errors
   	/Users/jakewendt/github_repo/ccls/clic_solr_search_demo
   	Wed Jul 13 10:26:36 -0700 2011

 # I think that this is my doing, but 
 # I thought that I fixed this somewhere and can't remember.
 # Don't think that its harmful, just irritating.

 autotest (OR just rake test)


== Data Import Notes

Fix study name inconsistencies...

 vi DB_DataDict_DB_110410_CM-*csv

 :bufdo :%s/ADELE (France)/France - ADELE/g|:up
 :bufdo :%s/ELECTRE (France)/France - ELECTRE/g|:up
 :bufdo :%s/ESCALE (France)/France - ESCALE/g|:up
 :bufdo :%s/Australia-ALL/AUS-ALL/g|:up
 :bufdo :%s/Brazil-IAL/Brazil/g|:up
 :bufdo :%s/CCRG, UK/CCRG/g|:up
 :bufdo :%s/Costa Rica Study/Costa Rica/g|:up
 :bufdo :%s/NaReCHem (Greece)/Greece/g|:up
 :bufdo :%s/Manchester, UK Study/Manchester, UK/g|:up
 :bufdo :%s/Italy Study/Italy/g|:up
 :bufdo :%s/New Zealand Study/New Zealand/g|:up
 :bufdo :%s/Quebec Study/Quebec/g|:up
 :bufdo :%s/Seoul Study/Korea/g|:up
 :bufdo :%s/QcALL Study\*/Qc-ALL/g|:up
 :bufdo :%s/GCCR/Germany/g|:up

 
== Original PHP App Notes

There is no direct correlation between the given database and index so using it as is with sunspot won't work.  The database is organized in a very non-relational hash-like manner.  There are about 50 records for a given subjectID where the label is the study, the variable is a hash key and the value is its value.  This appears to be due to the varying numbers of keys and is almost self-relational.

 mysql> describe fake_data;
 +-----------+--------------+------+-----+---------+-------+
 | Field     | Type         | Null | Key | Default | Extra |
 +-----------+--------------+------+-----+---------+-------+
 | hashID    | varchar(50)  | NO   | PRI | NULL    |       |
 | subjectID | varchar(50)  | NO   | MUL | NULL    |       |
 | label     | varchar(50)  | NO   |     | NULL    |       |
 | variable  | varchar(200) | NO   | MUL | NULL    |       |
 | value     | varchar(200) | NO   |     | NULL    |       |
 | indexed   | int(11)      | NO   | MUL | NULL    |       |
 +-----------+--------------+------+-----+---------+-------+


From reverse engineering an existing db and index.  

 curl "http://localhost:8983/solr/select/?q=*:*&amp;wt=json&amp;facet=true&amp;facet.field=item_type&quot;
 => "facet_fields":{"item_type":["record",52225,"protocol_item",2463,"study",17]}

The "study" count directly correlates to expected counts.

 mysql> select count(distinct label) from fake_data;
 => 17

 "project_name":["CCRG, United Kingdom",25561,"UKCCS",5527,"GCCR",4367,"California Childhood Leukemia Study",3590,"ESCALE (France)",2466,"NaReCHem (Greece)",1941,"Italy Study",1759,"Quebec Study",1630,"Brazil-IAL",1269,"QcALL Study",1150,"ELECTRE (France)",1051,"Australia-ALL",975,"Costa Rica Study",920,"New Zealand Study",819,"Seoul Study",611,"ADELE (France)",590,"Manchester, UK Study",479]}


However, the "record" count is smaller than expected

 mysql> select count(distinct subjectID) from fake_data;
 => 60631

 mysql> select count(distinct subjectID) from fake_data where value='CASE';
 => 27429

 mysql> select count(distinct subjectID) from fake_data where value='CONTROL';
 => 33202


Still not sure what a 'protocol_item' is.

When I facet on item_class, the case count is correct. The control count, is off by 8406?  Where are they?  What are they?  The summation of all but "case", "control" and "CLIC Study" is 2463, which is the aforementioned protocol_item count.

 curl "http://localhost:8983/solr/select/?q=*:*&amp;wt=json&amp;facet=true&amp;facet.field=item_class&quot;
 => "facet_fields":{"item_class":["case",27429,"control",24796,"Occupational History",749,"Pesticides",667,"Vitamins",259,"Tobacco",180,"Family History",130,"Alcohol",126,"Education",122,"Home Chemicals",112,"Ethnicity",80,"Income",38,"CLIC Study",17]}


Getting closer?  Does indexed=0 mean NOT indexed?  Most values are 1, however, there are other values from 43672 to 60624.  What do they mean?  The database seems to contain over 8000 unindexed subjects?  The count is still off by 20 though.  I'm never gonna be able to compare my results at the end if I can't figure this out at the beginning.

 mysql> select variable, value, indexed, count(*) from fake_data where variable='case status' and indexed=0;
 +-------------+---------+---------+----------+
 | variable    | value   | indexed | count(*) |
 +-------------+---------+---------+----------+
 | case status | CONTROL |       0 |     8426 |
 +-------------+---------+---------+----------+




CLIC_sql.sql did not include everything ... so hack away until its happy.

 mysql> create table refer_links( `id` int(11) NOT NULL AUTO_INCREMENT,ref_count int(11),ref_hash varchar(255),PRIMARY KEY (`id`));

 mysql> create table space( `id` int(11) NOT NULL AUTO_INCREMENT,created DATETIME,PRIMARY KEY (`id`));

 mysql> create table studies( `id` int(11) NOT NULL AUTO_INCREMENT,doc_id int(11),PRIMARY KEY (`id`));

 mysql> create table protocol_items( `id` int(11) NOT NULL AUTO_INCREMENT,PRIMARY KEY (`id`));



== httpd.conf

mods to httpd.conf that were required to get the initial php app (not this app) up and running.

 Listen 8080
 <VirtualHost *:8080>
  ServerName ###########
  DirectoryIndex index.php
  DocumentRoot "/Library/WebServer/Documents/compressed_php/public"
  RewriteEngine On
 </VirtualHost>
 <directory "/Library/WebServer/Documents/compressed_php/public">
  IndexOptions +FancyIndexing NameWidth=*
  Options Includes FollowSymLinks Indexes
  AllowOverride All
  Order allow,deny
  Allow from all
 </directory>


== References

* https://github.com/outoftime/sunspot
* http://collectiveidea.com/blog/archives/2011/03/08/full-text-searching-with-solr-and-sunspot/
* http://hemju.com/2011/01/04/full-text-search-with-sunspot-in-rails/
* http://masonoise.wordpress.com/2010/02/06/using-sunspot-for-free-text-search-with-redis/
* http://timcowlishaw.co.uk/post/3179661158/testing-sunspot-with-test-unit

* reference Updated LeukStudySummary_05112011_HR.xls
* columns in CLIC Sample data_10-8-2010_LM
* CLIC_comprehensivetable_data_092910_CM.xls contains many questions
* DB_DataDict_DB_110410_CM.xls is very similar

